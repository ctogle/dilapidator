#!/usr/bin/env python3
from dilap.geometry import *
from dilap.core import *
from dilap.core.model import model
from dilap.io import exporters as io
from dilap.worldly import *
import dilap.worldly.blockletters as blett
import dilap.core.plotting as dtl
import matplotlib.pyplot as plt
from math import sqrt
import argparse
import random
import os
import pdb


def makecube(p=None, q=None, s=None):
    m = model()
    sg = scenegraph()
    sgv = sg.avert(p, q, s, models=[m], parent=sg.root)
    gm = m.atricube()
    m.normals(gm)
    return sg


def makebuilding(seed=0):
    random.seed(seed)

    fp = vec3(0,0,0).sq(80,60)
    xpj = vec3(1,0,0).prjps(fp)
    e = (xpj[1]-xpj[0])/1000.0
    print('determined e: %f' % e)

    from dilap.worldly.polygen import blgfp
    fp = blgfp(fp, e)

    ax = plot_axes_xy(100)
    ax = plot_polygon_full_xy(fp,ax,lw = 2)
    plt.show()

    #fp,holes = blett.block('C',25,50,50)

    sg = building(fp,e)
    return sg


def makecontinent(seed=0):
    random.seed(seed)
    b = vec3(0,0,0).pring(250,8)
    xpj = vec3(1,0,0).prjps(b)
    e = (xpj[1]-xpj[0])/1000.0
    print('determined e: %f' % e)
    sg = continent(b,e)
    return sg


def makedemo(args):
    b = vec3(0,0,0).pring(250,8)
    xpj = vec3(1,0,0).prjps(b)
    e = (xpj[1]-xpj[0])/1000.0
    print('e',e)
    t = terrain(b,e)
    r = roadmap(t,e)
    a = world(t,r,e)
    sg = scenegraph()
    print('moment of truth')
    pdb.set_trace()
    return sg


def tropico(seed=0):
    random.seed(seed)
    sg = scenegraph()

    def grid(n):
        d = sqrt(n)
        if not int(d) == d:
            d += 1
        d = int(d)
        for x,y in ((x,y) for x in range(d) for y in range(d)):
            yield vec3(x*50,y*50,0)

    types = (beach,oak)

    for t, tfp in zip(types,grid(len(types))):
        m = model()
        g = m.agfxmesh()
        
        i, p, d = 4, vec3(0,0,0), vec3(0,0,1)
        l = t(i, tfp, d)

        l.plot()
        plt.show()

        treeskin(m, g, l)
        sgv = sg.avert(None, None, None, models=[m], parent=sg.root)
    return sg


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-o',
        '--output',
        default=os.path.join(os.getcwd(), 'world'),
        type=str,
        help='Path in which to store resulting data', )
    parser.add_argument(
        '-e',
        '--exporter',
        default='fbx',
        type=str,
        help='Mode used for targeting specific formats (e.g. fbx, obj, js)', )
    parser.add_argument(
        '-s',
        '--seed',
        default=0,
        type=int,
        help='Random seed used in procedural decision making', )
    args = parser.parse_args()

    generator = makecontinent
    generator(args.seed).output(args.exporter, args.output)
